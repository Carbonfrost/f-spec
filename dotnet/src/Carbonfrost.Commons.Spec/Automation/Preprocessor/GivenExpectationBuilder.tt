<#@ template language="C#" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>

//
// File was automatically generated at <#= DateTime.Now #>
//

using System;

<#
    const int MAX = 8;
#>
namespace Carbonfrost.Commons.Spec {

<# for (int i = 0; i <= MAX; i++) {
   string[] typeArgsList = Enumerable.Range(1, i).Select(t => "T" + t).ToArray();
   string[] fields   = Enumerable.Range(1, i).Select(t => "Arg" + t).ToArray();
   string[] parms    = Enumerable.Range(1, i).Select(t => "arg" + t).ToArray();

   if (i == 1) {
       typeArgsList = new [] { "T" };
   }

   string args = List(typeArgsList.Zip(parms, (t, f) => (t + " " + f))); // T1 arg1, T2 arg2...
   string typeArgs = "<" + List(typeArgsList) + ">";
   string typeArgsResult = "<" + List(typeArgsList.Concat(new [] { "TResult" })) + ">";
   string comma = (i == 0) ? "" : ", ";

   if (typeArgs == "<>") {
       typeArgs = "";
   }
#>

    partial class TestClass {

        public GivenExpectationBuilder<#= typeArgs #> Given<#= typeArgs #>(<#= args #>) {
            return Assert.Given<#= typeArgs #>(<#= List(parms) #>);
        }
    }

    partial class Asserter {

        public GivenExpectationBuilder<#= typeArgs #> Given<#= typeArgs #>(<#= args #>) {
            return new GivenExpectationBuilder<#= typeArgs #>(<#= List(parms) #><#= comma #> _assumption);
        }

    }

    partial class Assert {

        public static GivenExpectationBuilder<#= typeArgs #> Given<#= typeArgs #>(<#= args #>) {
            return Global.Given<#= typeArgs #>(<#= List(parms) #>);
        }

    }

    partial class Assume {

        public static GivenExpectationBuilder<#= typeArgs #> Given<#= typeArgs #>(<#= args #>) {
            return Global.Given<#= typeArgs #>(<#= List(parms) #>);
        }

    }

    public partial struct GivenExpectationBuilder<#= typeArgs #> {

        public bool Assumption {
            get;
            private set;
        }

<# foreach (var m in typeArgsList.Zip(fields, (t, f) => (t + " " + f))) { #>
        public <#= m #> {
            get;
            private set;
        }
<# } #>

        internal GivenExpectationBuilder(<#= args #><#= comma #>bool assumption) {
          Assumption = assumption;
<# foreach (var m in fields.Zip(parms, (t, f) => (t + " = " + f))) { #>
        <#= m #>;
<# } #>
        }

        public IExpectationBuilder<TResult> Expect<TResult>(Func<#= typeArgsResult #> func) {
<# foreach (var m in parms.Zip(fields, (t, f) => (t + " = " + f))) { #>
        var <#= m #>;
<# } #>
            return new ExpectationBuilder<TResult>(() => func(<#= List(parms) #>),
                                                   false,
                                                   TextUtility.FormatArgs(<#= List(parms) #>),
                                                   Assumption);
        }

        public IExpectationBuilder Expect(Action<#= typeArgs #> func) {
<# foreach (var m in parms.Zip(fields, (t, f) => (t + " = " + f))) { #>
        var <#= m #>;
<# } #>
            return new ExpectationBuilder(() => func(<#= List(parms) #>),
                                          false,
                                          TextUtility.FormatArgs(<#= List(parms) #>),
                                          Assumption);
        }

        public GivenRecord Record {
            get {
                return new GivenRecord(this);
            }
        }

        public struct GivenRecord {

          private readonly GivenExpectationBuilder<#= typeArgs #> _parent;

          internal GivenRecord(GivenExpectationBuilder<#= typeArgs #> parent) {
              _parent = parent;
          }

          public Exception Exception<TResult>(Func<#= typeArgsResult #> func) {
<# foreach (var m in parms.Zip(fields, (t, f) => (t + " = _parent." + f))) { #>
              var <#= m #>;
<# } #>
              return Carbonfrost.Commons.Spec.Record.Exception(() => func(<#= List(parms) #>));
          }

          public Exception Exception(Action<#= typeArgs #> func) {
<# foreach (var m in parms.Zip(fields, (t, f) => (t + " = _parent." + f))) { #>
              var <#= m #>;
<# } #>
              return Carbonfrost.Commons.Spec.Record.Exception(() => func(<#= List(parms) #>));
          }

          public TestCodeDispatchInfo DispatchInfo<TResult>(Func<#= typeArgsResult #> func, RecordExceptionFlags flags) {
<# foreach (var m in parms.Zip(fields, (t, f) => (t + " = _parent." + f))) { #>
              var <#= m #>;
<# } #>
              return Carbonfrost.Commons.Spec.Record.DispatchInfo(() => func(<#= List(parms) #>), flags);
          }

          public TestCodeDispatchInfo DispatchInfo(Action<#= typeArgs #> func, RecordExceptionFlags flags) {
<# foreach (var m in parms.Zip(fields, (t, f) => (t + " = _parent." + f))) { #>
              var <#= m #>;
<# } #>
              return Carbonfrost.Commons.Spec.Record.DispatchInfo(() => func(<#= List(parms) #>), flags);
          }

        }
    }

<# } #>

}
<#+
    static string List(IEnumerable<string> items) {
        return string.Join(", ", items);
    }
#>
