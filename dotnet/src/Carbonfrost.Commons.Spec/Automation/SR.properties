AllWhitespace=Argument can't be all whitespace.
BadEpsilonComparerTypes=Can't apply approximate comparisons to `${typeSelf}'.
CannotAliasDifferentTagNames=Cannot create an alias when tags have different names
CannotAssertAssertExceptions=Can't use `ExpectedExceptionAttribute` or `ThrowsAttribute` on a test that throws assertions exceptions if those exceptions might be caught by the attribute.  Replace with `Assert.Throws`.
CannotFindDataField=Couldn't find data field ${name} on test class.
CannotFindDataProperty=Couldn't find data property ${prop} on test class.
CannotFindFixture=Can't find fixture '${fileName}' in (${searchDirectories})
CannotTreatAsDictionaryOrGroupings=Can't assert that instance of `${type}' has keys because it doesn't support it.
CannotUseInstanceOfOnNullActual=Can't use instance-of or not-instance-of on null actual values.  Assert that the value is non-null before trying to assert its type.
CannotUseNullOnValueType=Can't use null or not-null on value type ${type}.  Assert that the value is a reference type before trying to assert whether it is null.
CardinalityMinGreaterThanMax=Make sure that Between() specifies min < max
CastRequiredByMatcherFailure=Invalid cast required by `${matcher}'.  This conversion may have been implicit; make sure that the type is supported by the assertion you are trying to use.
ConsistentlyElapsedBefore=Elapsed before ${duration}.  Consistently expected to:
CouldNotLoadType=Couldn't load the required type: ${type}
DataPropertyIncorrectGetter=Expected data property to have a get method and to be of type IEnumerable<object[]> or another compatible IEnumerable<> return type.
EventuallyTimedOutAfter=Timed out after ${duration}.  Eventually expected to:
ExactlyOnePlural=Don't use Exactly(0).Item() or No.Item() -- use Items
ExactlyOneSingular=Don't use Exactly(1).Items() or Single.Items() -- use Item
ExpectedAllElementsTo=Expected all elements to:
ExpectedAnyElementTo=Expected any element to:
ExpectedAssignableFrom=Expected assignable from {Expected}
ExpectedAtLeastTo=Expected at least ${number} to:
ExpectedAtMostTo=Expected at most ${number} to:
ExpectedBetween=Expected to be between
ExpectedBetweenTo=Expected between ${low} and ${high} to:
ExpectedContains=Expected to contain {Expected}
ExpectedContainsSubstring=Expected to contain substring "{Expected}"
ExpectedDistinct=Expected to be distinct
ExpectedEmpty=Expected empty
ExpectedEndWith=Expected to end with {Expected}
ExpectedEndWithSubstring=Expected to end with substring {Expected}
ExpectedEqual=Expected equal
ExpectedEqualDownloadContents=Expected to equal download contents {Source}
ExpectedEqualFileContents=Expected to equal file contents {FileName}
ExpectedExactly=Expected exactly ${number} to:
ExpectedFalse=Expected false
ExpectedGreaterThan=Expected > {Expected}
ExpectedGreaterThanOrEqualTo=Expected >= {Expected}
ExpectedHaveCount=Expected to have count {Expected}
ExpectedHaveKey=Expected key
ExpectedHaveKeyWithValue=Expected key with value
ExpectedHaveLength=Expected to have length {Expected}
ExpectedHaveSingle=Expected single item
ExpectedInstanceOf=Expected instance of {Expected}
ExpectedLessThan=Expected < {Expected}
ExpectedLessThanOrEqualTo=Expected <= {Expected}
ExpectedMatch=Expected to match {Expected}
ExpectedMemberwiseEqual=Expected memberwise-equal
ExpectedNotAllElementsTo=Expected not all elements to:
ExpectedNotAnyElementTo=Expected not any element to:
ExpectedNull=Expected null
ExpectedOverlap=Expected overlap
ExpectedReferenceType=Expected reference type
ExpectedSame=Expected same
ExpectedSatisfyAll=Expected to satisfy all:
ExpectedSatisfyAny=Expected to satisfy any:
ExpectedSequenceEqual=Expected sequence-equal
ExpectedSetEqual=Expected set-equal
ExpectedStartWith=Expected to start with {Expected}
ExpectedStartWithSubstring=Expected to start with substring {Expected}
ExpectedThrows=Expected to throw "{Expected}"
ExpectedTo=Expected to:
ExpectedTrue=Expected true
ExpectedValueType=Expected value type
ExplicitPassNotSet=Test is configured to require explicitly passing, but test completed without invoking Assert.Pass().
FactMethodParamCount=Fact method ${name} cannot have parameters
Failed=Explicitly failed
FailedToLoadAssembly=Not an assembly: ${path}
FailedToLoadAssemblyGeneralIO=Assembly file could not load: ${path} (${error})
FailedToLoadAssemblyPath=Assembly file not found: ${path}
FixtureParserIllegalTabs=Illegal tabs
FixtureParserMissingFieldSeparator=Expected `:'
HaveLengthWorksWith=Can't assert length with objects of this type.  It works only for strings and arrays.  Investigate asserting on count for collections instead.
LabelActual=Actual
LabelActualCount=Actual count
LabelBoundsExclusive=Bounds exclusive
LabelComparer=Comparer
LabelComparison=Comparison
LabelDiff=Diff
LabelDifferences=Differences
LabelExpected=Expected
LabelFileName=File name
LabelFlags=Flags
LabelGiven=Given
LabelHigh=High
LabelIndexes=Indexes
LabelLow=Low
LabelMatchers=Matchers
LabelMemberFilter=Member filter
LabelPredicate=Predicate
LabelProperty=Property
LabelSource=Source
LabelSubject=Subject
MultiAccessorsTheoryParameterMismatch=Invalid cross join: Theory method must have exactly as many parameters as members in the data source.
MultipleTestUnitFactories=Method has more than one fact or theory attribute
NegativeCardinality=Make sure that AtLeast or min value is non-negative
NegativeTimeout=Timeout must be positive or exactly equal to 0 or -1 to indicate an infinite timeout.
NoException=(No exception)
NoTestMethods=Test class has no test methods
NoTestSubjects=Test class has no test subjects
NotExpectedAssignableFrom=Not expected to be assignable from {Expected}
NotExpectedBetween=Not expected to be between
NotExpectedContains=Not expected to contain {Expected}
NotExpectedContainsSubstring=Not expected to contain substring "{Expected}"
NotExpectedDistinct=Not expected to be distinct
NotExpectedEmpty=Not expected to be empty
NotExpectedEndWith=Not expected to end with {Expected}
NotExpectedEndWithSubstring=Not expected to end with substring {Expected}
NotExpectedEqual=Not expected to be equal to
NotExpectedEqualDownloadContents=Not expected to equal download contents {Source}
NotExpectedEqualFileContents=Not expected to equal file contents {FileName}
NotExpectedFalse=Not expected to be false
NotExpectedGreaterThan=Not expected to be > {Expected}
NotExpectedGreaterThanOrEqualTo=Not expected to be >= {Expected}
NotExpectedHaveCount=Not expected to have count {Expected}
NotExpectedHaveKey=Expected not to have key {Expected}
NotExpectedHaveKeyWithValue=Expected not to have key with value
NotExpectedHaveLength=Not expected to have length {Expected}
NotExpectedHaveSingle=Not expected to have single item
NotExpectedInstanceOf=Expected not instance of {Expected}
NotExpectedLessThan=Not expected to be < {Expected}
NotExpectedLessThanOrEqualTo=Not expected to be <= {Expected}
NotExpectedMatch=Not expected to match {Expected}
NotExpectedMemberwiseEqual=Not expected to be memberwise-equal
NotExpectedNull=Not expected to be null
NotExpectedOverlap=Not expected to overlap
NotExpectedReferenceType=Expected not reference type
NotExpectedSame=Not expected to be same
NotExpectedSatisfyAll=Not expected to satisfy all
NotExpectedSatisfyAny=Not expected to satisfy any
NotExpectedSequenceEqual=Not expected to be sequence-equal
NotExpectedSetEqual=Not expected to be set-equal
NotExpectedStartWith=Not expected to start with {Expected}
NotExpectedStartWithSubstring=Not expected to start with substring {Expected}
NotExpectedThrows=Not expected to throw "{Expected}"
NotExpectedTo=Not expected to:
NotExpectedTrue=Not expected to be true
NotExpectedValueType=Expected not value type
NotPredicateAssignableFrom=not be assignable from {Expected}
NotPredicateBetween=not to be between {Low} {High} {BoundsExclusive:B:(exclusive)}
NotPredicateContains=not to contain {Expected}
NotPredicateContainsSubstring=not to contain substring "{Expected}"
NotPredicateDistinct=not be distinct
NotPredicateEmpty=not be empty
NotPredicateEndWith=not end with {Expected}
NotPredicateEndWithSubstring=not end with substring {Expected}
NotPredicateEqual=not be equal to {Expected}
NotPredicateEqualDownloadContents=not to equal download contents {Source}
NotPredicateEqualFileContents=not to equal file contents {FileName}
NotPredicateFalse=not be false
NotPredicateGreaterThan=not be > {Expected}
NotPredicateGreaterThanOrEqualTo=not be >=not  {Expected}
NotPredicateHaveCount=not have count {Expected}
NotPredicateHaveKey=not have key {Expected}
NotPredicateHaveKeyWithValue=not have key with value {ExpectedKey}={ExpectedValue}
NotPredicateHaveLength=not have length {Expected}
NotPredicateHaveSingle=not have single item
NotPredicateInstanceOf=not be instance of {Expected}
NotPredicateLessThan=not be < {Expected}
NotPredicateLessThanOrEqualTo=not be <=not  {Expected}
NotPredicateMatch=not match {Expected}
NotPredicateMemberwiseEqual=not be memberwise-equal
NotPredicateNull=not be null
NotPredicateOverlap=not overlap
NotPredicateReferenceType=not be reference type
NotPredicateSame=not be same
NotPredicateSatisfyAll=not satisfy all
NotPredicateSatisfyAny=not satisfy any
NotPredicateSequenceEqual=not be sequence-equal
NotPredicateSetEqual=not be set-equal
NotPredicateStartWith=not start with {Expected}
NotPredicateStartWithSubstring=not start with substring {Expected}
NotPredicateThrows=not to throw "{Expected}"
NotPredicateTrue=not be true
NotPredicateValueType=not be value type
ParserErrorLinePosition=${message}, line ${line}
Passed=Explicitly passed
Pending=Pending
PossibleDelegateRetargeting=Delegate test data may need retargeting to work as expected, and you must explicitly opt-in using the proper attribute metadata or test types.
PredicateAssignableFrom=be assignable from {Expected}
PredicateBetween=to be between {Low} {High}
PredicateContains=to contain {Expected}
PredicateContainsSubstring=to contain substring "{Expected}"
PredicateDistinct=be distinct
PredicateEmpty=be empty
PredicateEndWith=end with {Expected}
PredicateEndWithSubstring=end with substring {Expected}
PredicateEqual=be equal to {Expected}
PredicateEqualDownloadContents=to equal download contents {Source}
PredicateEqualFileContents=to equal file contents {FileName}
PredicateFalse=be false
PredicateGreaterThan=be > {Expected}
PredicateGreaterThanOrEqualTo=be >= {Expected}
PredicateHaveCount=have count {Expected}
PredicateHaveKey=have key {ExpectedKey}
PredicateHaveKeyWithValue=have key with value {ExpectedKey}={ExpectedValue}
PredicateHaveLength=have length {Expected}
PredicateHaveSingle=have single item
PredicateInstanceOf=be instance of {Expected}
PredicateLessThan=be < {Expected}
PredicateLessThanOrEqualTo=be <= {Expected}
PredicateMatch=match {Expected}
PredicateMemberwiseEqual=be memberwise-equal
PredicateNull=be null
PredicateOverlap=overlap
PredicateReferenceType=be reference type
PredicateSame=be same
PredicateSatisfyAll=satisfy all
PredicateSatisfyAny=satisfy any
PredicateSequenceEqual=be sequence-equal
PredicateSetEqual=be set-equal
PredicateStartWith=start with {Expected}
PredicateStartWithSubstring=start with substring {Expected}
PredicateThrows=to throw "{Expected}"
PredicateTrue=be true
PredicateValueType=be value type
Sealed=Can't modify the object right now because it has been sealed from further modifications.
SequenceNullConversion=Unexpectedly tried to assert on a sequence that was a null reference.
TemporaryDirectoryFileNameRooted=Path must be an absolute path or navigate beyond the directory.
TestFileDataRequiresOneParameter=TestFileDataAttribute can only be used on theories with one parameter.
TestTimedOut=Test timed out.  Allowed execution time ${time} was execeeded
TheoryHasNoDataProviders=No test data for theory
UnusableComparer=Unable to compare values using the specified comparer
WrongNumberOfTheoryArguments=Test case #${num} for theory method ${clazz}.${method} has incorrect number of arguments.
